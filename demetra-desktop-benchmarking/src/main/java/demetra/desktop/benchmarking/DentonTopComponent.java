/*
 * Copyright 2013 National Bank of Belgium
 *
 * Licensed under the EUPL, Version 1.1 or â€“ as soon they will be approved 
 * by the European Commission - subsequent versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 * 
 * http://ec.europa.eu/idabc/eupl
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and 
 * limitations under the Licence.
 */
package demetra.desktop.benchmarking;

import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//ec.nbdemetra.benchmarking//Denton//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "DentonTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
//@ActionID(category = "Window", id = "ec.nbdemetra.benchmarking.DentonTopComponent")
//@ActionReference(path = "Menu/Statistical methods/Benchmarking", position = 1000)
//@TopComponent.OpenActionRegistration(
//        displayName = "#CTL_DentonAction",
//        preferredID = "DentonTopComponent")
@Messages({
    "CTL_DentonAction=Denton",
    "CTL_DentonTopComponent=Denton Window",
    "HINT_DentonTopComponent=This is a Denton window"
})
public final class DentonTopComponent extends WorkspaceTopComponent<DentonDocument> {

    protected Ts2ProcessingViewer panel;

    public DentonTopComponent() {
        super(null);
        //initDocument();
    }

    public DentonTopComponent(WorkspaceItem<DentonDocument> doc) {
        super(doc);
        initDocument();
    }

    public void initDocument() {
        setName(getDocument().getDisplayName());
        setToolTipText(Bundle.CTL_CholetteTopComponent());
        initComponents();
        panel = Ts2ProcessingViewer.create(this.getDocument().getElement(), "Series", "Constraint");
        add(panel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        super.componentOpened();
        if (panel != null) {
            panel.doLayout();
        }
    }

    @Override
    public void componentClosed() {
        super.componentClosed();
        if (panel != null) {
            panel.dispose();
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String getContextPath() {
        return DentonDocumentManager.CONTEXTPATH; //To change body of generated methods, choose Tools | Templates.
    }
}
