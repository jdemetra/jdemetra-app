name: Java8+ with Maven

on: [ push, pull_request ]

jobs:
  build-and-test-job:
    strategy:
      fail-fast: false
      matrix:
        java: [ 8, 17 ]
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
        experimental: [ false ]
        include:
          - java: '-ea'
            os: ubuntu-latest
            experimental: true

    name: JDK${{ matrix.java }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          cache: 'maven'

      - name: Build jdemetra-core snapshots
        run: |
          git clone -b v3.0.0 --single-branch --depth=1 https://github.com/jdemetra/jdemetra-core.git jdemetra-core
          cd jdemetra-core
          mvn -B install -DskipTests=true
          cd ..

      - name: Build and (headless) test with Maven
        uses: GabrielBB/xvfb-action@v1
        with:
          run: mvn -B package --file pom.xml

  release-job:
    needs: build-and-test-job
    if: startsWith(github.repository, 'jdemetra/') && startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        java: [ 17 ]
        os: [ ubuntu-latest ]

    name: Release on tag
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B package --file pom.xml -DskipTests=true

      - name: Create dummy file if no assets
        run: test -d "binaries" || (mkdir binaries && echo "no assets" > binaries/no_assets.txt)

      - name: Create draft release and upload assets
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: 'binaries/*'

      - name: Deploy with Maven
        run: test -f ci.settings.xml && mvn -B deploy -Dmaven.test.skip -s ci.settings.xml -P deploy-releases
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
