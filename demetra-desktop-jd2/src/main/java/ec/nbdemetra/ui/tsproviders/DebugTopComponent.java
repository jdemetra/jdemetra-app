/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ec.nbdemetra.ui.tsproviders;

import demetra.ui.util.NbComponents;
import ec.tss.tsproviders.DataSet;
import ec.tss.tsproviders.DataSource;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.nodes.AbstractNode;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//ec.nbdemetra.ui//Debug//EN",
autostore = false)
@TopComponent.Description(preferredID = "DebugTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "ec.nbdemetra.ui.DebugTopComponent")
@ActionReference(path = "Menu/Window", position = 311)
@TopComponent.OpenActionRegistration(displayName = "#CTL_DebugAction",
preferredID = "DebugTopComponent")
@NbBundle.Messages({
    "CTL_DebugAction=Debug",
    "CTL_DebugTopComponent=Debug Window",
    "HINT_DebugTopComponent=This is a Debug window"
})
public final class DebugTopComponent extends TopComponent implements LookupListener {

    private Lookup.Result<AbstractNode> lookupResult = null;

    public DebugTopComponent() {
        initComponents();
        setName(Bundle.CTL_DebugTopComponent());
        setToolTipText(Bundle.HINT_DebugTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = NbComponents.newJScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        jTextPane1.setEditable(false);
        jScrollPane1.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        lookupResult = Utilities.actionsGlobalContext().lookupResult(AbstractNode.class);
        lookupResult.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        lookupResult.removeLookupListener(this);
        lookupResult = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        if (!le.getSource().equals(lookupResult)) {
            return;
        }
        StringBuilder sb = new StringBuilder();
        for (AbstractNode o : lookupResult.allInstances()) {
            if (o instanceof DataSourceNode) {
                sb.append(DataSource.xmlFormatter(true).formatValue(o.getLookup().lookup(DataSource.class)).get());
            } else if (o instanceof DataSetNode) {
                sb.append(DataSet.xmlFormatter(true).formatValue(o.getLookup().lookup(DataSet.class)).get());
            }
        }
        jTextPane1.setText(sb.toString());
    }
}
