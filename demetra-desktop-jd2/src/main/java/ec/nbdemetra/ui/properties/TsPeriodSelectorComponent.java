/*
 * Copyright 2013 National Bank of Belgium
 *
 * Licensed under the EUPL, Version 1.1 or â€“ as soon they will be approved 
 * by the European Commission - subsequent versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 *
 * http://ec.europa.eu/idabc/eupl
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and 
 * limitations under the Licence.
 */
package ec.nbdemetra.ui.properties;

import ec.tstoolkit.timeseries.Day;
import ec.tstoolkit.timeseries.PeriodSelectorType;
import ec.tstoolkit.timeseries.TsPeriodSelector;

/**
 *
 * @author Philippe Charles
 */
public final class TsPeriodSelectorComponent extends javax.swing.JPanel {

    /**
     * Creates new form TsPeriodSelectorComponent
     */
    public TsPeriodSelectorComponent() {
        initComponents();

        type.addItemListener(event -> updateType((PeriodSelectorType) event.getItem()));

        type.setSelectedItem(PeriodSelectorType.All);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        type = new javax.swing.JComboBox();
        from = new com.toedter.calendar.JDateChooser();
        to = new com.toedter.calendar.JDateChooser();
        fromLabel = new javax.swing.JLabel();
        toLabel = new javax.swing.JLabel();
        first = new com.toedter.components.JSpinField();
        firstLabel = new javax.swing.JLabel();
        lastLabel = new javax.swing.JLabel();
        last = new com.toedter.components.JSpinField();
        jLabel1 = new javax.swing.JLabel();

        type.setModel(new javax.swing.DefaultComboBoxModel(PeriodSelectorType.values()));

        fromLabel.setLabelFor(from);
        org.openide.awt.Mnemonics.setLocalizedText(fromLabel, org.openide.util.NbBundle.getMessage(TsPeriodSelectorComponent.class, "TsPeriodSelectorComponent.fromLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(toLabel, org.openide.util.NbBundle.getMessage(TsPeriodSelectorComponent.class, "TsPeriodSelectorComponent.toLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(firstLabel, org.openide.util.NbBundle.getMessage(TsPeriodSelectorComponent.class, "TsPeriodSelectorComponent.firstLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lastLabel, org.openide.util.NbBundle.getMessage(TsPeriodSelectorComponent.class, "TsPeriodSelectorComponent.lastLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(TsPeriodSelectorComponent.class, "TsPeriodSelectorComponent.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fromLabel)
                            .addComponent(firstLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(from, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(first, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(toLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lastLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(last, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(to, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(50, 50, 50)
                            .addComponent(fromLabel))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(toLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(to, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(from, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(first, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstLabel)
                    .addComponent(lastLabel)
                    .addComponent(last, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.components.JSpinField first;
    private javax.swing.JLabel firstLabel;
    private com.toedter.calendar.JDateChooser from;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JLabel jLabel1;
    private com.toedter.components.JSpinField last;
    private javax.swing.JLabel lastLabel;
    private com.toedter.calendar.JDateChooser to;
    private javax.swing.JLabel toLabel;
    private javax.swing.JComboBox type;
    // End of variables declaration//GEN-END:variables

    private void updateType(PeriodSelectorType val) {
        switch (val) {
            case All:
            case None:
                from.setEnabled(false);
                to.setEnabled(false);
                first.setEnabled(false);
                last.setEnabled(false);
                break;
            case From:
                from.setEnabled(true);
                to.setEnabled(false);
                first.setEnabled(false);
                last.setEnabled(false);
                break;
            case To:
                from.setEnabled(false);
                to.setEnabled(true);
                first.setEnabled(false);
                last.setEnabled(false);
                break;
            case Between:
                from.setEnabled(true);
                to.setEnabled(true);
                first.setEnabled(false);
                last.setEnabled(false);
                break;
            case Last:
                from.setEnabled(false);
                to.setEnabled(false);
                first.setEnabled(false);
                last.setEnabled(true);
                break;
            case First:
                from.setEnabled(false);
                to.setEnabled(false);
                first.setEnabled(true);
                last.setEnabled(false);
                break;
            case Excluding:
                from.setEnabled(false);
                to.setEnabled(false);
                first.setEnabled(true);
                last.setEnabled(true);
                break;
        }
        fromLabel.setEnabled(from.isEnabled());
        toLabel.setEnabled(to.isEnabled());
        firstLabel.setEnabled(first.isEnabled());
        lastLabel.setEnabled(last.isEnabled());
    }
    
    public TsPeriodSelector getTsPeriodSelector() {
        TsPeriodSelector result = new TsPeriodSelector();
        switch ((PeriodSelectorType) type.getSelectedItem()) {
            case All:
                result.all();
                break;
            case None:
                result.none();
                break;
            case From:
                result.from(from.getDate() != null ? new Day(from.getDate()) : TsPeriodSelector.DEF_BEG);
                break;
            case To:
                result.to(to.getDate() != null ? new Day(to.getDate()) : TsPeriodSelector.DEF_END);
                break;
            case Between:
                Day d0 = from.getDate() != null ? new Day(from.getDate()) : TsPeriodSelector.DEF_BEG;
                Day d1 = to.getDate() != null ? new Day(to.getDate()) : TsPeriodSelector.DEF_END;
                result.between(d0, d1);
                break;
            case Last:
                result.last(last.getValue());
                break;
            case First:
                result.first(first.getValue());
                break;
            case Excluding:
                result.excluding(first.getValue(), last.getValue());
                break;
        }
        return result;
    }

    public void setTsPeriodSelector(TsPeriodSelector value) {
        type.setSelectedItem(value.getType());
        switch (value.getType()) {
            case All:
            case None:
                from.setDate(null);
                to.setDate(null);
                first.setValue(0);
                last.setValue(0);
                break;
            case From:
                from.setDate(value.getD0().getTime());
                to.setDate(null);
                first.setValue(0);
                last.setValue(0);
                break;
            case To:
                from.setDate(null);
                to.setDate(value.getD1().getTime());
                first.setValue(0);
                last.setValue(0);
                break;
            case Between:
                from.setDate(value.getD0().getTime());
                to.setDate(value.getD1().getTime());
                first.setValue(0);
                last.setValue(0);
                break;
            case Last:
                from.setDate(null);
                to.setDate(null);
                first.setValue(0);
                last.setValue(value.getN1());
                break;
            case First:
                from.setDate(null);
                to.setDate(null);
                first.setValue(value.getN0());
                last.setValue(0);
                break;
            case Excluding:
                from.setDate(null);
                to.setDate(null);
                first.setValue(value.getN0());
                last.setValue(value.getN1());
                break;
        }
    }
}