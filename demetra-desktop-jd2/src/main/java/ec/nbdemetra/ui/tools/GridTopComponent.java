/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ec.nbdemetra.ui.tools;

import ec.nbdemetra.ui.DemetraUiIcon;
import demetra.ui.util.NbComponents;
import ec.nbdemetra.ui.nodes.ControlNode;
import demetra.ui.components.JTsGrid;
import internal.ui.components.HasTsCollectionCommands;
import static internal.ui.components.JTsGridCommands.REVERSE_ACTION;
import static internal.ui.components.JTsGridCommands.TRANSPOSE_ACTION;
import java.awt.BorderLayout;
import javax.swing.*;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.Node;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//ec.nbdemetra.ui.tools//Grid//EN",
        autostore = false)
@TopComponent.Description(preferredID = "GridTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ONLY_OPENED)
@TopComponent.Registration(mode = "tsnavigator", openAtStartup = false)
@ActionID(category = "Window", id = "ec.nbdemetra.ui.tools.GridTopComponent")
@ActionReference(path = "Menu/Tools/Container", position = 200)
@TopComponent.OpenActionRegistration(displayName = "#CTL_GridAction")
@Messages({
    "CTL_GridAction=Grid",
    "CTL_GridTopComponent=Grid",
    "HINT_GridTopComponent=This is a Grid window"
})
public final class GridTopComponent extends TopComponent implements ExplorerManager.Provider, MultiViewElement {

    private final ExplorerManager mgr = new ExplorerManager();

    public GridTopComponent() {
        initComponents();
        setName(Bundle.CTL_GridTopComponent());
        setToolTipText(Bundle.HINT_GridTopComponent());
        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
        add(new JTsGrid(), BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void open() {
        super.open();
        WindowManager.getDefault().getModes();
        Mode mode = WindowManager.getDefault().findMode("tsnavigator");
        if (mode != null) {
            mode.dockInto(this);
        }
    }

    @Override
    public void componentOpened() {
        ControlNode.onComponentOpened(mgr, getGrid());
    }

    @Override
    public void componentClosed() {
        mgr.setRootContext(Node.EMPTY);
    }

    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        // TODO: create this once
        JToolBar result = NbComponents.newInnerToolbar();

        result.addSeparator();

        JButton copy = new JButton(getGrid().getActionMap().get(HasTsCollectionCommands.COPY_ALL_ACTION));
        copy.setText("");
        copy.setToolTipText("Copy");
        copy.setIcon(DemetraUiIcon.EDIT_COPY_16);
        result.add(copy);

        JToggleButton transpose = new JToggleButton(getGrid().getActionMap().get(TRANSPOSE_ACTION));
        transpose.setText("");
        transpose.setToolTipText("Transpose");
        transpose.setIcon(DemetraUiIcon.HORIZONTAL_16);
        transpose.setSelectedIcon(DemetraUiIcon.VERTICAL_16);
        result.add(transpose);

        JToggleButton reverse = new JToggleButton(getGrid().getActionMap().get(REVERSE_ACTION));
        reverse.setText("");
        reverse.setToolTipText("Reverse chronology");
        reverse.setIcon(DemetraUiIcon.SORT_DATE_16);
        reverse.setSelectedIcon(DemetraUiIcon.SORT_DATE_DESCENDING_16);
        result.add(reverse);

        return result;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
    }

    @Override
    public void componentDeactivated() {
        super.componentDeactivated();
    }

    @Override
    public void componentActivated() {
        super.componentActivated();
    }

    @Override
    public void componentHidden() {
        super.componentHidden();
    }

    @Override
    public void componentShowing() {
        super.componentShowing();
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        ToolsPersistence.writeTsCollection(getGrid(), p);
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        ToolsPersistence.readTsCollection(getGrid(), p);
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }

    public JTsGrid getGrid() {
        return (JTsGrid) getComponent(0);
    }
}
