/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ec.nbdemetra.sa.output;

import ec.nbdemetra.ui.DemetraUiIcon;
import ec.tss.sa.ISaOutputFactory;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.JPopupMenu;
import javax.swing.ListSelectionModel;
import org.openide.awt.DropDownButtonFactory;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;

/**
 *
 * @author Jean Palate
 */
public class OutputPanel extends javax.swing.JPanel implements ExplorerManager.Provider {

    // PROPERTIES DEFINITION
    public static final String OUTPUT_PROPERTY = "specialDayEvents";
    // PROPERTIES
    protected String nationalCalendarName;
    protected List<ISaOutputFactory> factories = new ArrayList<>();
    // OTHER
    final ExplorerManager em;
    final JPopupMenu addPopupMenu;

    /**
     * Creates new form NationalCalendarPanel
     */
    public OutputPanel() {
        this.nationalCalendarName = "";

        this.em = new ExplorerManager();

        em.addVetoableChangeListener(evt -> {
            if (ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
                Node[] nodes = (Node[]) evt.getNewValue();
                removeButton.setEnabled(nodes.length > 0);
            }
        });

        em.setRootContext(new AbstractNode(new Children.Array()));
        this.addPopupMenu = new JPopupMenu();


        initComponents();

        outputList.setShowParentNode(false);
        outputList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        removeButton.setEnabled(false);

        addPropertyChangeListener(evt -> {
            String p = evt.getPropertyName();
            if (p.equals(OUTPUT_PROPERTY)) {
                onOutputChange();
            }
        });
        refreshNodes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        outputList = new org.openide.explorer.view.ListView();
        outputProperties = new org.openide.explorer.propertysheet.PropertySheetView();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel2 = new javax.swing.JLabel();
        addButton = DropDownButtonFactory.createDropDownButton(DemetraUiIcon.LIST_ADD_16, addPopupMenu);
        removeButton = new javax.swing.JButton();

        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setResizeWeight(0.5);
        jSplitPane1.setLeftComponent(outputList);
        jSplitPane1.setRightComponent(outputProperties);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jLabel2.setText(org.openide.util.NbBundle.getMessage(OutputPanel.class, "OutputPanel.jLabel2.text")); // NOI18N
        jToolBar1.add(jLabel2);

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ec/nbdemetra/ui/list-add_16x16.png"))); // NOI18N
        addButton.setToolTipText(org.openide.util.NbBundle.getMessage(OutputPanel.class, "OutputPanel.addButton.toolTipText_1")); // NOI18N
        addButton.setFocusable(false);
        addButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(addButton);

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ec/nbdemetra/ui/list-remove_16x16.png"))); // NOI18N
        removeButton.setFocusable(false);
        removeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(removeButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1))
        );
    }// </editor-fold>//GEN-END:initComponents

private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
    Node[] nodes = em.getSelectedNodes();
    if (nodes.length > 0) {
        remove(((AbstractOutputNode) nodes[0]).getDisplayName());
    }
}//GEN-LAST:event_removeButtonActionPerformed

private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_addButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private org.openide.explorer.view.ListView outputList;
    private org.openide.explorer.propertysheet.PropertySheetView outputProperties;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables

    // EVENT HANDLERS>
    protected void onOutputChange() {
        updateFactories();
    }
    // < EVENT HANDLERS

    public List<ISaOutputFactory> getFactories() {
        updateFactories();
        return Collections.unmodifiableList(factories);
    }

    // < GETTERS/SETTERS
    // HELPERS >
    public void add(AbstractOutputNode node) {
        updateFactories();
        factories.add(node.getFactory());
        refreshNodes();
    }

    private int search(String node) {
        int ipos = 0;
        for (ISaOutputFactory fac : factories) {
            if (fac.getName().equals(node)) {
                return ipos;
            }
            ++ipos;
        }
        return -1;
    }

    public void remove(String name) {
        updateFactories();
        for (ISaOutputFactory fac : factories){
            if (fac.getName().equals(name)){
                factories.remove(fac);
                break;
            }
        }
        refreshNodes();
    }

    public void updateFactories() {
        factories.clear();
        Node rootContext = em.getRootContext();
        for (Node child : rootContext.getChildren().getNodes()) {
            if (child instanceof AbstractOutputNode) {
                factories.add(((AbstractOutputNode) child).getFactory());
            }
        }
    }

    private void refreshNodes() {
        Node[] children = new Node[factories.size()];
        for (int i = 0; i < children.length; ++i) {
            children[i] = OutputManager.getInstance().createNodeFor(factories.get(i).getProperties());
        }
        Children.Array c = new Children.Array();
        c.add(children);
        em.setRootContext(new AbstractNode(c));
        addPopupMenu.removeAll();
        for (final INbOutputFactory fac : OutputManager.getInstance().getFactories()) {
            if (search(fac.getName()) == -1) {
                addPopupMenu.add(new AbstractAction(fac.getName()) {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        add(fac.createNode());
                    }
                });
            }
        }
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }
}
