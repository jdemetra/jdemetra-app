/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/NetBeansModuleDevelopment-files/template_mypluginPanel.java to edit this template
 */
package demetra.desktop.tramoseats.ui;

import demetra.desktop.actions.Configurable;
import demetra.desktop.actions.Resetable;
import demetra.desktop.nodes.AbstractNodeBuilder;
import demetra.desktop.nodes.NamedServiceNode;
import demetra.desktop.tramoseats.diagnostics.TramoSeatsDiagnosticsFactoryBuddy;
import ec.util.list.swing.JListSelection;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.Node;
import org.openide.util.Lookup;

final class TramoSeatsPanel extends javax.swing.JPanel {

    private final TramoSeatsOptionsPanelController controller;
    private final JListSelection<String> fieldSelectionComponent = new JListSelection<>();
    private final List<String> selectedSeries = new ArrayList<>();
    private final List<String> selectedDiags = new ArrayList<>();

    TramoSeatsPanel(TramoSeatsOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
        getDiagnosticsExplorerManager().addPropertyChangeListener((PropertyChangeEvent evt) -> {
            if (ExplorerManager.PROP_SELECTED_NODES.equals(evt.getPropertyName())) {
                Node[] nodes = (Node[]) evt.getNewValue();
                editDiagnostic.setEnabled(nodes.length == 1 && nodes[0].getLookup().lookup(Configurable.class) != null);
                resetDiagnostic.setEnabled(nodes.length == 1 && nodes[0].getLookup().lookup(Resetable.class) != null);
            }
        });

        fieldSelectionComponent.setSourceHeader(new JLabel("Available items :"));
        fieldSelectionComponent.setTargetHeader(new JLabel("Selected items :"));
        fieldSelectionComponent.setBorder(new EmptyBorder(10, 10, 10, 10));
        fieldSelectionComponent.setPreferredSize(new Dimension(400, 300));

    }

    private ExplorerManager getDiagnosticsExplorerManager() {
        return ((ExplorerManager.Provider) diagnosticsPanel).getExplorerManager();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        componentsPanel = new javax.swing.JPanel();
        seriesSubPanel1 = new javax.swing.JPanel();
        selectedSeriesLabel = new javax.swing.JLabel();
        selectedSeriesButton = new javax.swing.JButton();
        estimationLabel6 = new javax.swing.JLabel();
        seriesSubPanel = new javax.swing.JPanel();
        selectedDiagLabel = new javax.swing.JLabel();
        selectedDiagButton = new javax.swing.JButton();
        estimationLabel1 = new javax.swing.JLabel();
        diagnosticsPanel = new ExtPanel();
        jToolBar1 = new javax.swing.JToolBar();
        editDiagnostic = new javax.swing.JButton();
        resetDiagnostic = new javax.swing.JButton();
        diagnosticsView = new org.openide.explorer.view.OutlineView("Diagnostics");

        componentsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(TramoSeatsPanel.class, "TramoSeatsPanel.componentsPanel.border.title"))); // NOI18N
        componentsPanel.setLayout(new javax.swing.BoxLayout(componentsPanel, javax.swing.BoxLayout.PAGE_AXIS));

        seriesSubPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 5, 1));
        seriesSubPanel1.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(selectedSeriesLabel, org.openide.util.NbBundle.getMessage(TramoSeatsPanel.class, "TramoSeatsPanel.selectedSeriesLabel.text")); // NOI18N
        seriesSubPanel1.add(selectedSeriesLabel, java.awt.BorderLayout.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(selectedSeriesButton, org.openide.util.NbBundle.getMessage(TramoSeatsPanel.class, "TramoSeatsPanel.selectedSeriesButton.text")); // NOI18N
        selectedSeriesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedSeriesButtonActionPerformed(evt);
            }
        });
        seriesSubPanel1.add(selectedSeriesButton, java.awt.BorderLayout.EAST);

        org.openide.awt.Mnemonics.setLocalizedText(estimationLabel6, org.openide.util.NbBundle.getMessage(TramoSeatsPanel.class, "TramoSeatsPanel.estimationLabel6.text")); // NOI18N
        estimationLabel6.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 10));
        seriesSubPanel1.add(estimationLabel6, java.awt.BorderLayout.WEST);

        componentsPanel.add(seriesSubPanel1);

        seriesSubPanel.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(selectedDiagLabel, org.openide.util.NbBundle.getMessage(TramoSeatsPanel.class, "TramoSeatsPanel.selectedDiagLabel.text")); // NOI18N
        seriesSubPanel.add(selectedDiagLabel, java.awt.BorderLayout.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(selectedDiagButton, org.openide.util.NbBundle.getMessage(TramoSeatsPanel.class, "TramoSeatsPanel.selectedDiagButton.text")); // NOI18N
        selectedDiagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedDiagButtonActionPerformed(evt);
            }
        });
        seriesSubPanel.add(selectedDiagButton, java.awt.BorderLayout.EAST);

        org.openide.awt.Mnemonics.setLocalizedText(estimationLabel1, org.openide.util.NbBundle.getMessage(TramoSeatsPanel.class, "TramoSeatsPanel.estimationLabel1.text")); // NOI18N
        estimationLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 10));
        seriesSubPanel.add(estimationLabel1, java.awt.BorderLayout.WEST);

        componentsPanel.add(seriesSubPanel);

        diagnosticsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(TramoSeatsPanel.class, "TramoSeatsPanel.diagnosticsPanel.border.title"))); // NOI18N

        jToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.setRollover(true);

        editDiagnostic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/demetra/desktop/tramoseats/ui/preferences-system_16x16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(editDiagnostic, org.openide.util.NbBundle.getMessage(TramoSeatsPanel.class, "TramoSeatsPanel.editDiagnostic.text")); // NOI18N
        editDiagnostic.setFocusable(false);
        editDiagnostic.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editDiagnostic.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editDiagnostic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDiagnosticActionPerformed(evt);
            }
        });
        jToolBar1.add(editDiagnostic);

        resetDiagnostic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/demetra/desktop/tramoseats/ui/reset_16x16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(resetDiagnostic, org.openide.util.NbBundle.getMessage(TramoSeatsPanel.class, "TramoSeatsPanel.resetDiagnostic.text")); // NOI18N
        resetDiagnostic.setFocusable(false);
        resetDiagnostic.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        resetDiagnostic.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        resetDiagnostic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetDiagnosticActionPerformed(evt);
            }
        });
        jToolBar1.add(resetDiagnostic);

        diagnosticsView.setColumnHeader(null);
        diagnosticsView.setColumnHeaderView(null);
        diagnosticsView.setQuickSearchAllowed(false);
        diagnosticsView.setRowHeaderView(null);

        javax.swing.GroupLayout diagnosticsPanelLayout = new javax.swing.GroupLayout(diagnosticsPanel);
        diagnosticsPanel.setLayout(diagnosticsPanelLayout);
        diagnosticsPanelLayout.setHorizontalGroup(
            diagnosticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(diagnosticsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(diagnosticsView, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        diagnosticsPanelLayout.setVerticalGroup(
            diagnosticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(diagnosticsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(diagnosticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(diagnosticsPanelLayout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 109, Short.MAX_VALUE))
                    .addGroup(diagnosticsPanelLayout.createSequentialGroup()
                        .addComponent(diagnosticsView, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(componentsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(diagnosticsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(componentsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(diagnosticsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void selectedSeriesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedSeriesButtonActionPerformed
        fieldSelectionComponent.getSourceModel().clear();
        fieldSelectionComponent.getTargetModel().clear();
        List<String> tmpAvailable = new ArrayList<>(TramoSeatsUI.get().allComponents());
        tmpAvailable.removeAll(selectedSeries);

        fieldSelectionComponent.getSourceModel().addAll(tmpAvailable);
        fieldSelectionComponent.getTargetModel().addAll(selectedSeries);

        NotifyDescriptor d = new NotifyDescriptor(fieldSelectionComponent, "Select fields",
                NotifyDescriptor.OK_CANCEL_OPTION,
                NotifyDescriptor.PLAIN_MESSAGE,
                null,
                NotifyDescriptor.OK_OPTION);
        if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.OK_OPTION) {
            selectedSeries.clear();
            selectedSeries.addAll(fieldSelectionComponent.getSelectedValues());
            selectedSeriesLabel.setText(String.format("%s selected", selectedSeries.size()));
            controller.changed();
        }
    }//GEN-LAST:event_selectedSeriesButtonActionPerformed

    private void selectedDiagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedDiagButtonActionPerformed
        fieldSelectionComponent.getSourceModel().clear();
        fieldSelectionComponent.getTargetModel().clear();
        List<String> tmpAvailable = new ArrayList<>(TramoSeatsUI.get().allDiagnostics());
        tmpAvailable.removeAll(selectedDiags);

        fieldSelectionComponent.getSourceModel().addAll(tmpAvailable);
        fieldSelectionComponent.getTargetModel().addAll(selectedDiags);
        NotifyDescriptor d = new NotifyDescriptor(fieldSelectionComponent, "Select fields",
                NotifyDescriptor.OK_CANCEL_OPTION,
                NotifyDescriptor.PLAIN_MESSAGE,
                null,
                NotifyDescriptor.OK_OPTION);
        if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.OK_OPTION) {
            selectedDiags.clear();
            selectedDiags.addAll(fieldSelectionComponent.getSelectedValues());
            selectedDiagLabel.setText(String.format("%s selected", selectedDiags.size()));
            controller.changed();
        }
    }//GEN-LAST:event_selectedDiagButtonActionPerformed

    private void editDiagnosticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDiagnosticActionPerformed
        if (getDiagnosticsExplorerManager().getSelectedNodes() != null && getDiagnosticsExplorerManager().getSelectedNodes().length != 0) {
            getDiagnosticsExplorerManager().getSelectedNodes()[0].getPreferredAction().actionPerformed(evt);
        }
    }//GEN-LAST:event_editDiagnosticActionPerformed

    private void resetDiagnosticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetDiagnosticActionPerformed
        Node[] sel = getDiagnosticsExplorerManager().getSelectedNodes();
        if (sel == null || sel.length == 0) {
            return;
        }
        Node node = sel[0];
        Resetable r = node.getLookup().lookup(Resetable.class);
        if (r == null) {
            return;
        }
        NotifyDescriptor d = new NotifyDescriptor.Confirmation("Would you like to reset to default values ?", "Reset", NotifyDescriptor.YES_NO_OPTION);
        if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.YES_OPTION) {
            r.reset();
        }
    }//GEN-LAST:event_resetDiagnosticActionPerformed

    void load() {
        selectedSeries.clear();
        selectedSeries.addAll(TramoSeatsUI.get().getSelectedComponents());
        selectedSeriesLabel.setText(String.format("%s selected", selectedSeries.size()));
        selectedDiags.clear();
        selectedDiags.addAll(TramoSeatsUI.get().getSelectedDiagnostics());
        selectedDiagLabel.setText(String.format("%s selected", selectedDiags.size()));
       AbstractNodeBuilder root = new AbstractNodeBuilder()
                .name("Diagnostics")
                .add(Lookup.getDefault().lookupAll(TramoSeatsDiagnosticsFactoryBuddy.class).stream().map(NamedServiceNode::new));
        getDiagnosticsExplorerManager().setRootContext(root.build());
    }

    void store() {
        TramoSeatsUI.get().setSelectedComponents(selectedSeries);
        TramoSeatsUI.get().setSelectedDiagnostics(selectedDiags);
        TramoSeatsUI.setDiagnostics();
    }

    boolean valid() {
        return Lookup.getDefault().lookupAll(TramoSeatsDiagnosticsFactoryBuddy.class).stream().allMatch(TramoSeatsDiagnosticsFactoryBuddy::valid);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel componentsPanel;
    private javax.swing.JPanel diagnosticsPanel;
    private org.openide.explorer.view.OutlineView diagnosticsView;
    private javax.swing.JButton editDiagnostic;
    private javax.swing.JLabel estimationLabel1;
    private javax.swing.JLabel estimationLabel6;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton resetDiagnostic;
    private javax.swing.JButton selectedDiagButton;
    private javax.swing.JLabel selectedDiagLabel;
    private javax.swing.JButton selectedSeriesButton;
    private javax.swing.JLabel selectedSeriesLabel;
    private javax.swing.JPanel seriesSubPanel;
    private javax.swing.JPanel seriesSubPanel1;
    // End of variables declaration//GEN-END:variables

    private static final class ExtPanel extends JPanel implements ExplorerManager.Provider {

        private final ExplorerManager em = new ExplorerManager();

        @Override
        public ExplorerManager getExplorerManager() {
            return em;
        }
    }

}
