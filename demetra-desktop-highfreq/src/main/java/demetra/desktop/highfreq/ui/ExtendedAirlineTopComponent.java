/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package demetra.desktop.highfreq.ui;

import jdplus.highfreq.extendedairline.ExtendedAirlineDocument;
import demetra.desktop.highfreq.ExtendedAirlineDocumentManager;
import demetra.desktop.workspace.DocumentUIServices;
import demetra.desktop.ui.processing.TsProcessingViewer;
import demetra.desktop.workspace.WorkspaceFactory;
import demetra.desktop.workspace.WorkspaceItem;
import demetra.desktop.workspace.ui.WorkspaceTsTopComponent;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.util.NbBundle;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//demetra.desktop.highfreq//ExtendedAirline//EN",
        autostore = false)
@TopComponent.Description(preferredID = "ExtendedAirlineTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Modelling", id = "demetra.desktop.highfreq.ExtendedAirlineTopComponent")
@ActionReference(path = "Menu/Statistical methods/Modelling/Single Analysis", position = 2000)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ExtendedAirlineAction")
@NbBundle.Messages({
    "CTL_ExtendedAirlineAction=Extended airline",
    "CTL_ExtendedAirlineTopComponent=Extended Airline Window",
    "HINT_ExtendedAirlineTopComponent=This is a Extended Airline window"
})
public final class ExtendedAirlineTopComponent extends WorkspaceTsTopComponent<ExtendedAirlineDocument> {

    private final ExplorerManager mgr = new ExplorerManager();

    private static ExtendedAirlineDocumentManager manager() {
        return WorkspaceFactory.getInstance().getManager(ExtendedAirlineDocumentManager.class);
    }

    public ExtendedAirlineTopComponent() {
        this(null);
    }

    public ExtendedAirlineTopComponent(WorkspaceItem<ExtendedAirlineDocument> doc) {
        super(doc);
        initComponents();
        setToolTipText(NbBundle.getMessage(ExtendedAirlineTopComponent.class, "HINT_ExtendedAirlineTopComponent"));
        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }

    @Override
    protected TsProcessingViewer initViewer() {
        return TsProcessingViewer.create(getElement(), DocumentUIServices.forDocument(ExtendedAirlineDocument.class));
    }

    @Override
    public WorkspaceItem<ExtendedAirlineDocument> newDocument() {
        return manager().create(WorkspaceFactory.getInstance().getActiveWorkspace());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String getContextPath() {
        return ExtendedAirlineDocumentManager.CONTEXTPATH;
    }
}
