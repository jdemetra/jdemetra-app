/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/NetBeansModuleDevelopment-files/template_mypluginPanel.java to edit this template
 */
package demetra.desktop.sa.ui;

import demetra.desktop.DemetraIcons;
import demetra.sa.EstimationPolicyType;
import demetra.sa.SaSpecification;
import ec.util.list.swing.JListSelection;
import java.awt.Dimension;
import java.awt.Image;
import java.beans.PropertyChangeEvent;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JPopupMenu;
import javax.swing.border.EmptyBorder;
import org.openide.awt.DropDownButtonFactory;
import org.openide.util.ImageUtilities;

final class GeneralPanel extends javax.swing.JPanel {

    private final GeneralOptionsPanelController controller;

    private final SpecSelectionComponent specComponent = new SpecSelectionComponent(true);
    private final JPopupMenu specPopup = new JPopupMenu();

    private final JListSelection<String> fieldSelectionComponent = new JListSelection<>();


    private EstimationPolicyType[] types = {EstimationPolicyType.Complete,
        EstimationPolicyType.FreeParameters,
        EstimationPolicyType.None};

    GeneralPanel(GeneralOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        initSpecButton();

// TODO        
//        allDiagFields.addAll(BasicConfiguration.allSingleSaDetails(false));
//        allSeriesFields.addAll(BasicConfiguration.allSeries(false, SaManager.instance.getProcessors()));
        fieldSelectionComponent.setSourceHeader(new JLabel("Available items :"));
        fieldSelectionComponent.setTargetHeader(new JLabel("Selected items :"));
        fieldSelectionComponent.setBorder(new EmptyBorder(10, 10, 10, 10));
        fieldSelectionComponent.setPreferredSize(new Dimension(400, 300));
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lastYearsPanel = new javax.swing.JPanel();
        spectralLastYears = new javax.swing.JSpinner();
        spectralLabel = new javax.swing.JLabel();
        stabilityLabel = new javax.swing.JLabel();
        stabilityLength = new javax.swing.JSpinner();
        saPanel = new javax.swing.JPanel();
        defaultSpecLabel = new javax.swing.JLabel();
        specButton = DropDownButtonFactory.createDropDownButton(DemetraIcons.BLOG_16, specPopup);
        selectedSpecLabel = new javax.swing.JLabel();
        revisionHistoryPanel = new javax.swing.JPanel();
        estimationLabel = new javax.swing.JLabel();
        estimationPolicyComboBox = new javax.swing.JComboBox();

        lastYearsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.lastYearsPanel.border.title"))); // NOI18N

        spectralLastYears.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        org.openide.awt.Mnemonics.setLocalizedText(spectralLabel, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.spectralLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(stabilityLabel, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.stabilityLabel.text")); // NOI18N

        stabilityLength.setModel(new javax.swing.SpinnerNumberModel(8, 1, null, 1));

        javax.swing.GroupLayout lastYearsPanelLayout = new javax.swing.GroupLayout(lastYearsPanel);
        lastYearsPanel.setLayout(lastYearsPanelLayout);
        lastYearsPanelLayout.setHorizontalGroup(
            lastYearsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lastYearsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lastYearsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(stabilityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spectralLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lastYearsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spectralLastYears, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stabilityLength, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        lastYearsPanelLayout.setVerticalGroup(
            lastYearsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lastYearsPanelLayout.createSequentialGroup()
                .addGroup(lastYearsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spectralLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(lastYearsPanelLayout.createSequentialGroup()
                        .addComponent(spectralLastYears, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lastYearsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stabilityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stabilityLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        saPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.saPanel.border.title"))); // NOI18N
        saPanel.setLayout(new javax.swing.BoxLayout(saPanel, javax.swing.BoxLayout.LINE_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(defaultSpecLabel, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.defaultSpecLabel.text")); // NOI18N
        defaultSpecLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 20));
        saPanel.add(defaultSpecLabel);

        org.openide.awt.Mnemonics.setLocalizedText(specButton, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.specButton.text")); // NOI18N
        saPanel.add(specButton);

        org.openide.awt.Mnemonics.setLocalizedText(selectedSpecLabel, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.selectedSpecLabel.text")); // NOI18N
        selectedSpecLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        saPanel.add(selectedSpecLabel);

        revisionHistoryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.revisionHistoryPanel.border.title"))); // NOI18N
        revisionHistoryPanel.setLayout(new javax.swing.BoxLayout(revisionHistoryPanel, javax.swing.BoxLayout.LINE_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(estimationLabel, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.estimationLabel.text")); // NOI18N
        estimationLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 20));
        revisionHistoryPanel.add(estimationLabel);

        revisionHistoryPanel.add(estimationPolicyComboBox);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(revisionHistoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(saPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lastYearsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lastYearsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(revisionHistoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        DemetraSaUI ui = DemetraSaUI.getDefault();
        spectralLastYears.setValue(ui.getSpectralLastYears());

        estimationPolicyComboBox.setModel(new DefaultComboBoxModel(types));
        estimationPolicyComboBox.setSelectedItem(ui.getEstimationPolicyType());

        stabilityLength.setValue(ui.getStabilityLength());

        specComponent.setSpecification(ui.getDefaultSaSpec());
        selectedSpecLabel.setText(ui.getDefaultSaSpec() == null ? "" : ui.getDefaultSaSpec().display());


//        AbstractNodeBuilder root = new AbstractNodeBuilder();
//        root.add(new AbstractNodeBuilder().name("Diagnostics")
//                .add(Lookup.getDefault().lookupAll(SaDiagnosticsFactoryBuddy.class).stream().map(NamedServiceNode::new)).build());
//        root.add(new AbstractNodeBuilder().name("Outputs")
//                .add(Lookup.getDefault().lookupAll(INbOutputFactory.class).stream().map(NamedServiceNode::new)).build());
//        getDiagnosticsExplorerManager().setRootContext(root.build());
    }

    void store() {
        DemetraSaUI ui = DemetraSaUI.getDefault();
        ui.setSpectralLastYears((Integer) spectralLastYears.getValue());
        ui.setEstimationPolicyType((EstimationPolicyType) estimationPolicyComboBox.getSelectedItem());
        ui.setStabilityLength((Integer) stabilityLength.getValue());

        ui.setDefaultSaSpec(specComponent.getSpecification());

//        NamedServiceNode.storeAll(getDiagnosticsExplorerManager());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel defaultSpecLabel;
    private javax.swing.JLabel estimationLabel;
    private javax.swing.JComboBox estimationPolicyComboBox;
    private javax.swing.JPanel lastYearsPanel;
    private javax.swing.JPanel revisionHistoryPanel;
    private javax.swing.JPanel saPanel;
    private javax.swing.JLabel selectedSpecLabel;
    private javax.swing.JButton specButton;
    private javax.swing.JLabel spectralLabel;
    private javax.swing.JSpinner spectralLastYears;
    private javax.swing.JLabel stabilityLabel;
    private javax.swing.JSpinner stabilityLength;
    // End of variables declaration//GEN-END:variables
    private void initSpecButton() {
        specPopup.add(specComponent);
        specComponent.addPropertyChangeListener((PropertyChangeEvent evt) -> {
            String p = evt.getPropertyName();
            if (p.equals(SpecSelectionComponent.SPECIFICATION_PROPERTY) && evt.getNewValue() != null) {
                selectedSpecLabel.setText(((SaSpecification) evt.getNewValue()).longDisplay());
            } else if (p.equals(SpecSelectionComponent.ICON_PROPERTY) && evt.getNewValue() != null) {
                specButton.setIcon(ImageUtilities.image2Icon((Image) evt.getNewValue()));
            }
        });
    }
}
