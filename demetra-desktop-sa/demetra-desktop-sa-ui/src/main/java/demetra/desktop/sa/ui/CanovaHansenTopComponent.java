/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package demetra.desktop.sa.ui;

import demetra.desktop.components.parts.HasTs;
import demetra.desktop.components.tools.PeriodogramView;
import java.beans.PropertyVetoException;
import java.lang.reflect.InvocationTargetException;
import jdplus.data.analysis.WindowFunction;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.*;
import org.openide.nodes.Sheet.Set;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//demetra.desktop.sa.ui//CanovaHansen//EN",
        autostore = false)
@TopComponent.Description(preferredID = "CanovaHansenTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "demetra.desktop.sa.ui.CanovaHansenTopComponent")
@ActionReference(path = "Menu/Statistical methods/Seasonal Adjustment/Tools", position = 350)
@TopComponent.OpenActionRegistration(displayName = "#CTL_CanovaHansenAction")
@Messages({
    "CTL_CanovaHansenAction=CanovaHansen",
    "CTL_CanovaHansenTopComponent=CanovaHansen Window",
    "HINT_CanovaHansenTopComponent=This is a Canova-Hansen window"
})
public final class CanovaHansenTopComponent extends TopComponent implements HasTs, ExplorerManager.Provider {

    private final ExplorerManager mgr = new ExplorerManager();

    @lombok.experimental.Delegate(types = HasTs.class)
    private final CanovaHansenView view;

    public CanovaHansenTopComponent() {
        initComponents();
        view = new CanovaHansenView();
        add(view);
        setName(Bundle.CTL_CanovaHansenTopComponent());
        setToolTipText(Bundle.HINT_CanovaHansenTopComponent());
        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }

    @Override
    protected void componentOpened() {
        Node node = new InternalNode();
        try {
            mgr.setRootContext(node);
            mgr.setSelectedNodes(new Node[]{node});
        } catch (PropertyVetoException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    @Override
    protected void componentClosed() {
        mgr.setRootContext(Node.EMPTY);
    }

    @Override
    public void open() {
        super.open();
        Mode mode = WindowManager.getDefault().findMode("output");
        if (mode != null && mode.canDock(this)) {
            mode.dockInto(this);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "3.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public demetra.timeseries.Ts getTs() {
        return view.getTs();
    }

    @Override
    public void setTs(demetra.timeseries.Ts ts) {
        view.setTs(ts);
    }

    class InternalNode extends AbstractNode {

        @Messages({
            "canovahansenTopComponent.internalNode.displayName=Canova-Hansen"
        })
        InternalNode() {
            super(Children.LEAF);
            setDisplayName(Bundle.canovahansenTopComponent_internalNode_displayName());
        }

        @Override
        @Messages({
            "canovahansenTopComponent.transform.name=Transform",
            "canovahansenTopComponent.transform.displayName=Transformation",
            "canovahansenTopComponent.ch.name=Canova-Hansen",
            "canovahansenTopComponent.ch.displayName=Canova-Hansen",
            "canovahansenTopComponent.display.name=Display",
            "canovahansenTopComponent.display.displayName=Display",
            "canovahansenTopComponent.log.name=Log",
            "canovahansenTopComponent.log.desc=When marked, logarithmic transformation is used.",
            "canovahansenTopComponent.trend.name=Trend",
            "canovahansenTopComponent.trend.desc=Trend in regression.",
            "canovahansenTopComponent.lag1.name=Lag1",
            "canovahansenTopComponent.lag1.desc=Lag1 in regression",
            "canovahansenTopComponent.windowfunction.name=Window function",
            "canovahansenTopComponent.windowfunction.desc=Window function used in the computation of the robust covariance.",
            "canovahansenTopComponent.truncationlag.name=Truncation lag",
            "canovahansenTopComponent.truncationlag.desc=Truncation lag used in the computation of the robust covariance.",
            "canovahansenTopComponent.minperiod.name=Min period",
            "canovahansenTopComponent.minperiod.desc=Min period",
            "canovahansenTopComponent.maxperiod.name=Max period",
            "canovahansenTopComponent.maxperiod.desc=Max period",
            "canovahansenTopComponent.resolution.name=Resolution",
            "canovahansenTopComponent.resolution.desc=Number of computed points",
            "canovahansenTopComponent.intresolution.name=Integer resolution",
            "canovahansenTopComponent.intresolution.desc=Round periods to integer when needed",
        })
        protected Sheet createSheet() {
            Sheet sheet = super.createSheet();
            Set transform = Sheet.createPropertiesSet();
            transform.setName(Bundle.canovahansenTopComponent_transform_name());
            transform.setDisplayName(Bundle.canovahansenTopComponent_transform_displayName());
            Property<Boolean> log = new Property(Boolean.class) {
                @Override
                public boolean canRead() {
                    return true;
                }

                @Override
                public Object getValue() throws IllegalAccessException, InvocationTargetException {
                    return view.isLog();
                }

                @Override
                public boolean canWrite() {
                    return true;
                }

                @Override
                public void setValue(Object t) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
                    view.setLog((Boolean) t);
                }
            };

            log.setName(Bundle.canovahansenTopComponent_log_name());
            log.setShortDescription(Bundle.canovahansenTopComponent_log_desc());
            transform.put(log);
            sheet.put(transform);
            ////
            Set ch = Sheet.createPropertiesSet();
            ch.setName(Bundle.canovahansenTopComponent_ch_name());
            ch.setDisplayName(Bundle.canovahansenTopComponent_ch_displayName());
            Property<Boolean> trend = new Property(Boolean.class) {
                @Override
                public boolean canRead() {
                    return true;
                }

                @Override
                public Object getValue() throws IllegalAccessException, InvocationTargetException {
                    return view.isTrend();
                }

                @Override
                public boolean canWrite() {
                    return true;
                }

                @Override
                public void setValue(Object t) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
                    view.setTrend((Boolean) t);
                }
            };
            trend.setName(Bundle.canovahansenTopComponent_trend_name());
            trend.setShortDescription(Bundle.canovahansenTopComponent_trend_desc());
            ch.put(trend);
            //
            Property<Boolean> lag1 = new Property(Boolean.class) {
                @Override
                public boolean canRead() {
                    return true;
                }

                @Override
                public Object getValue() throws IllegalAccessException, InvocationTargetException {
                    return view.isLag1();
                }

                @Override
                public boolean canWrite() {
                    return true;
                }

                @Override
                public void setValue(Object t) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
                    view.setLag1((Boolean) t);
                }
            };

            lag1.setName(Bundle.canovahansenTopComponent_lag1_name());
            lag1.setShortDescription(Bundle.canovahansenTopComponent_lag1_desc());
            ch.put(lag1);
            //
            Property<WindowFunction> win = new Property(WindowFunction.class) {
                @Override
                public boolean canRead() {
                    return true;
                }

                @Override
                public Object getValue() throws IllegalAccessException, InvocationTargetException {
                    return view.getWindowFunction();
                }

                @Override
                public boolean canWrite() {
                    return true;
                }

                @Override
                public void setValue(Object t) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
                    view.setWindowFunction((WindowFunction) t);
                }
            };
            win.setName(Bundle.canovahansenTopComponent_windowfunction_name());
            win.setShortDescription(Bundle.canovahansenTopComponent_windowfunction_desc());
            ch.put(win);
            //
            Property<Integer> tlag = new Property(Integer.class) {
                @Override
                public boolean canRead() {
                    return true;
                }

                @Override
                public Object getValue() throws IllegalAccessException, InvocationTargetException {
                    return view.getTruncationLag();
                }

                @Override
                public boolean canWrite() {
                    return true;
                }

                @Override
                public void setValue(Object t) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
                    view.setTruncationLag((Integer) t);
                }
            };
            tlag.setName(Bundle.canovahansenTopComponent_truncationlag_name());
            tlag.setShortDescription(Bundle.canovahansenTopComponent_truncationlag_desc());
            ch.put(tlag);
            sheet.put(ch);
            ////
            Set display = Sheet.createPropertiesSet();
            display.setName(Bundle.canovahansenTopComponent_display_name());
            display.setDisplayName(Bundle.canovahansenTopComponent_display_displayName());
            Node.Property<Double> min = new Node.Property(Double.class) {
                @Override
                public boolean canRead() {
                    return true;
                }

                @Override
                public Object getValue() throws IllegalAccessException, InvocationTargetException {
                    return view.getMinPeriod();
                }

                @Override
                public boolean canWrite() {
                    return true;
                }

                @Override
                public void setValue(Object t) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
                    view.setMinPeriod((Double) t);
                }
            };
            min.setName(Bundle.canovahansenTopComponent_minperiod_name());
            min.setShortDescription(Bundle.canovahansenTopComponent_minperiod_desc());
            display.put(min);
            //
            Node.Property<Double> max = new Node.Property(Double.class) {
                @Override
                public boolean canRead() {
                    return true;
                }

                @Override
                public Object getValue() throws IllegalAccessException, InvocationTargetException {
                    return view.getMaxPeriod();
                }

                @Override
                public boolean canWrite() {
                    return true;
                }

                @Override
                public void setValue(Object t) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
                    view.setMaxPeriod((Double) t);
                }
            };
            max.setName(Bundle.canovahansenTopComponent_maxperiod_name());
            max.setShortDescription(Bundle.canovahansenTopComponent_maxperiod_desc());
            display.put(max);
            //
            Node.Property<Integer> res = new Node.Property(Integer.class) {
                @Override
                public boolean canRead() {
                    return true;
                }

                @Override
                public Object getValue() throws IllegalAccessException, InvocationTargetException {
                    return view.getResolution();
                }

                @Override
                public boolean canWrite() {
                    return true;
                }

                @Override
                public void setValue(Object t) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
                    view.setResolution((Integer) t);
                }
            };
            res.setName(Bundle.canovahansenTopComponent_resolution_name());
            res.setShortDescription(Bundle.canovahansenTopComponent_resolution_desc());
            display.put(res);
            //
            Node.Property<Boolean> ires = new Node.Property(Boolean.class) {
                @Override
                public boolean canRead() {
                    return true;
                }

                @Override
                public Object getValue() throws IllegalAccessException, InvocationTargetException {
                    return view.isIntResolution();
                }

                @Override
                public boolean canWrite() {
                    return true;
                }

                @Override
                public void setValue(Object t) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
                    view.setIntResolution((Boolean) t);
                }
            };
            ires.setName(Bundle.canovahansenTopComponent_intresolution_name());
            ires.setShortDescription(Bundle.canovahansenTopComponent_intresolution_desc());
            display.put(ires);
            sheet.put(display);
            return sheet;
        }
    }
}
